#!/usr/bin/env python3.6
# -*- coding: utf-8 -*-
"""
Created on Wed Jun 14 08:30:14 2017

@author: Marcus Naslund 
"""

import schprog as SP

""" initialize designer """
mDes = SP.Designer()
""" initialize ISO """
# (designCateory)
mISO = SP.ISO12215('A')
""" initialize vessel """
# (LWL, bC, mLDC, beta04, hT, tC, V)
mVess = SP.Vessel(6.851, 2.008, 4500, 30.0, 3.0, 0.875, 12.0)
""" initialize structure """
mStruct = SP.Structure(mVess)
""" assign Structure to Vessel """
mVess.assign_structure(mStruct)

""" create materials """
# (matLabel, yieldStrength, tensileStrength, elasticModulus, shearModulus, density)
mAL_5083_O = SP.MaterialsLibrary('AL_5083_O', 125, 270, 7000, 2692, 2720)
mAL_6082_T6 = SP.MaterialsLibrary('AL_6082_T6', 115, 170, 7000, 2692, 2830)

""" create plates """
mPlaLib = SP.PlatingLibrary()
# (label, tp)
mAL3 = SP.Plates('AL3', 3)
mAL4 = SP.Plates('AL4', 4)
mAL5 = SP.Plates('AL5', 5)
mAL8 = SP.Plates('AL8', 8)
mAL10 = SP.Plates('AL10', 10)
mPlaLib.assign_plate(mAL3)
mPlaLib.assign_plate(mAL4)
mPlaLib.assign_plate(mAL5)
mPlaLib.assign_plate(mAL8)
mPlaLib.assign_plate(mAL10)

""" create profiles """
mProfLib = SP.ProfileLibrary()
# (profLabel, SM, Aw, tw, hw, tf, fw, pType)
mFlatBar60x5 = SP.Extrusions('Flat Bar 60 x 5', 6.179, 3.000, 5.0, 60, 0, 0, 'Flat Bar')
mFlatBar61x5 = SP.Extrusions('Flat Bar 61 x 5', 6.170, 3.050, 5.0, 61, 0, 0, 'Flat Bar')
mFlatBar62x6 = SP.Extrusions('Flat Bar 62 x 6', 8.824, 3.720, 6.0, 62, 0, 0, 'Flat Bar')

mProfLib.assign_extrusion(mFlatBar60x5)
mProfLib.assign_extrusion(mFlatBar61x5)
mProfLib.assign_extrusion(mFlatBar62x6)

# (profLabel, tw, hw, tf, fw, pType)
mFlatBar36x3 = SP.Machined('Flat Bar 36 x 3', 3.0, 36.0, 0, 0, 'Flat Bar')
mFlatBar35x3 = SP.Machined('Flat Bar 35 x 3', 3.0, 35.0, 0, 0, 'Flat Bar')
mFlatBar34x3 = SP.Machined('Flat Bar 34 x 3', 3.0, 34.0, 0, 0, 'Flat Bar')
mFlatBar33x3 = SP.Machined('Flat Bar 33 x 3', 3.0, 33.0, 0, 0, 'Flat Bar')
mFlatBar32x3 = SP.Machined('Flat Bar 32 x 3', 3.0, 32.0, 0, 0, 'Flat Bar')

mFlatBar48x4 = SP.Machined('Flat Bar 48 x 4', 4.0, 48.0, 0, 0, 'Flat Bar')
mFlatBar47x4 = SP.Machined('Flat Bar 47 x 4', 4.0, 47.0, 0, 0, 'Flat Bar')
mFlatBar46x4 = SP.Machined('Flat Bar 46 x 4', 4.0, 46.0, 0, 0, 'Flat Bar')
mFlatBar45x4 = SP.Machined('Flat Bar 45 x 4', 4.0, 45.0, 0, 0, 'Flat Bar')
mFlatBar44x4 = SP.Machined('Flat Bar 44 x 4', 4.0, 44.0, 0, 0, 'Flat Bar')

mFlatBar60x5 = SP.Machined('Flat Bar 60 x 5', 5.0, 60.0, 0, 0, 'Flat Bar')
mFlatBar59x5 = SP.Machined('Flat Bar 59 x 5', 5.0, 59.0, 0, 0, 'Flat Bar')
mFlatBar58x5 = SP.Machined('Flat Bar 58 x 5', 5.0, 58.0, 0, 0, 'Flat Bar')
mFlatBar57x5 = SP.Machined('Flat Bar 57 x 5', 5.0, 57.0, 0, 0, 'Flat Bar')
mFlatBar56x5 = SP.Machined('Flat Bar 56 x 5', 5.0, 56.0, 0, 0, 'Flat Bar')
mFlatBar55x5 = SP.Machined('Flat Bar 55 x 5', 5.0, 55.0, 0, 0, 'Flat Bar')
mFlatBar54x5 = SP.Machined('Flat Bar 54 x 5', 5.0, 54.0, 0, 0, 'Flat Bar')
mFlatBar53x5 = SP.Machined('Flat Bar 53 x 5', 5.0, 53.0, 0, 0, 'Flat Bar')
mFlatBar52x5 = SP.Machined('Flat Bar 52 x 5', 5.0, 52.0, 0, 0, 'Flat Bar')
mFlatBar51x5 = SP.Machined('Flat Bar 51 x 5', 5.0, 51.0, 0, 0, 'Flat Bar')
mFlatBar50x5 = SP.Machined('Flat Bar 50 x 5', 5.0, 50.0, 0, 0, 'Flat Bar')


mProfLib.assign_machined(mFlatBar36x3)
mProfLib.assign_machined(mFlatBar35x3)
mProfLib.assign_machined(mFlatBar34x3)
mProfLib.assign_machined(mFlatBar33x3)
mProfLib.assign_machined(mFlatBar32x3)

mProfLib.assign_machined(mFlatBar48x4)
mProfLib.assign_machined(mFlatBar47x4)
mProfLib.assign_machined(mFlatBar46x4)
mProfLib.assign_machined(mFlatBar45x4)
mProfLib.assign_machined(mFlatBar44x4)

mProfLib.assign_machined(mFlatBar60x5)
mProfLib.assign_machined(mFlatBar59x5)
mProfLib.assign_machined(mFlatBar58x5)
mProfLib.assign_machined(mFlatBar57x5)
mProfLib.assign_machined(mFlatBar56x5)
mProfLib.assign_machined(mFlatBar55x5)
mProfLib.assign_machined(mFlatBar54x5)
mProfLib.assign_machined(mFlatBar53x5)
mProfLib.assign_machined(mFlatBar52x5)
mProfLib.assign_machined(mFlatBar51x5)
mProfLib.assign_machined(mFlatBar50x5)


""" create a section (stiffened panel between two girder ans two frames) """
# (sGird, sFram, xPos)
mDes.create_section(480, 845, 3.022)
""" create panels and stiffeners from specified topology with equally spaces stiffeners """
# (objStruct, nStiff, location)
mDes.create_section_topology(mStruct, 3, 'bottom')

""" assign nomenclature to panels and stiffeners"""
# (longiLoc, stiffID) # stiffID is which stiffeners is this panel attached to (longiLoc)

mStruct.Panel[0].assign_nomenclature('D', 3)
mStruct.Panel[1].assign_nomenclature('D', 4)
mStruct.Panel[2].assign_nomenclature('D', 5)
mStruct.Panel[3].assign_nomenclature('D', 6)
# (longiLoc, panSpan) sLoc is location around vessel with respect to centreline
mStruct.Stiffener[0].assign_nomenclature(2, 'D')
mStruct.Stiffener[1].assign_nomenclature(3, 'D')
mStruct.Stiffener[2].assign_nomenclature(4, 'D')




""" calculate pressure using ISO rules """
mDes.calc_pressure_factors(mISO, mStruct, mVess) # objStruct.Panel[i].'pressure factors'
                                                 # [ruleType, kL, kAR_d, kAR_p, kZ]
mDes.calc_design_pressures(mISO, mStruct, mVess) # objStruct.Panel[i].'scantling requirements'
                                                 # [ruleType, pMax]

""" if you wanna assign material to a specific panel """
#mStruct.Panel[i].assign_material(mAL_5083_O) # mStruct.Panel[i].Material
""" if you wanna assign the same material to all panels """
mDes.assign_material_to_all_panels(mStruct, mAL_5083_O) # mStruct.Panel[i].Material
""" if you wanna assign material to a specific stiffener """
#mStruct.Stiffener[i].assign_material(mAL_6082_T6) # mStruct.Stiffener[i].Material
"""  if you wanna assign the same material to all stiffeners """
mDes.assign_material_to_all_stiffeners(mStruct, mAL_6082_T6)

""" calculate scantling requirement """
mDes.calc_scantling_req(mISO, mStruct, mVess) # objStruct.Panel[i].'scantling requirements'
                                              # [ruleType, k2, k3, FShear, MBend, tReq, tMin]

""" assign recommended plate to all panels """
#mDes.assign_recommended_plates(mStruct, mPlaLib) # objStruct.Panel[i].Plate
mStruct.Panel[0].assign_plate(mAL3)
mStruct.Panel[1].assign_plate(mAL3)
mStruct.Panel[2].assign_plate(mAL4)
mStruct.Panel[3].assign_plate(mAL5)

""" assign profile to specific stiffener """
mStruct.Stiffener[0].assign_profile(mFlatBar60x5)
mStruct.Stiffener[1].assign_profile(mFlatBar60x5)
mStruct.Stiffener[2].assign_profile(mFlatBar60x5)

""" calculate total weight """
mStruct.calc_total_weight()

print('calculations done')

    
mRep = SP.Report()
mRep.create_scantling_report('test', mStruct, mDes)
print('report done')

""" If you wanna view all the attributes of the panels or stiffeners """
#for i in range(0, mStruct.Panel.__len__()):
#    for attr, value in mStruct.Panel[i].__dict__.items():
#        print(attr, "=", value)
#    print("___________________________________")
#    
#
#for i in range(0, mStruct.Stiffener.__len__()):
#    for attr, value in mStruct.Stiffener[i].__dict__.items():
#        print(attr, "=", value)
#    print("___________________________________")

""" OPTIMIZATION """
""" initialize structure """
mStruct2 = SP.Structure(mVess)
""" assign Structure to Vessel """
mVess.assign_structure(mStruct)
""" initilize optimizer """
mOpt = SP.Optimizer()
""" provide list with extrusions to use in sweep method """
extrusions = [mFlatBar60x5, mFlatBar61x5, mFlatBar62x6]
""" provide list with machined profiles to use in sweep method """
machined = mProfLib.list_all_machined()
# (objVess, objStruct, objRule, objDes, objPlaLib,
#  minNrStiff, maxNrStiff, panMat, stiffMat, extrusions)
print('start optimization')
sweep = mOpt.sweep_method(mVess, mStruct2, mISO, mDes, mPlaLib,
                          0, 3, mAL_5083_O, mAL_6082_T6, extrusions,
                          machined)
print('sweep optimization done')
mOpt.assign_sweep(sweep)
mRep.create_optimization_report('Opti', mOpt)
print('optimization report done')
 
 
